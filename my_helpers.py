def heuristic(map_obj, node, goal):
    """
    Calcula a distância Euclidiana entre o nó atual e o objetivo.
    """
    import math
    x1, y1 = map_obj.intersections[node]
    x2, y2 = map_obj.intersections[goal]
    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
import pickle
import os

class Map:
    def __init__(self, intersections, roads):
        self.intersections = intersections
        self.roads = roads

def load_map(filename):
    """
    Carrega um mapa a partir de um arquivo pickle.
    Se não encontrar, retorna um mapa de exemplo.
    """
    if os.path.exists(filename):
        with open(filename, 'rb') as f:
            data = pickle.load(f)
        return Map(data['intersections'], data['roads'])
    else:
        # Mapa de exemplo com nós suficientes para os testes
        intersections = {
            0: (0.7801603911549438, 0.49474860768712914),
            1: (0.5249831588690298, 0.14953665513987202),
            2: (0.8085335344099086, 0.7696330846542071),
            3: (0.2599134798656856, 0.14485659826020547),
            4: (0.7353838928272886, 0.8089961609345658),
            5: (0.09088671576431506, 0.7222846879290787),
            6: (0.313999018186756, 0.01876171413125327),
            7: (0.6824813442515916, 0.8016111783687677),
            8: (0.20128789391122526, 0.43196344222361227),
            9: (0.8551947714242674, 0.9011339078096633),
            10: (0.7581736589784409, 0.24026772497187532),
            11: (0.25311953895059136, 0.10321622277398101),
            12: (0.4813859169876731, 0.5006237737207431),
            13: (0.9112422509614865, 0.1839028760606296),
            14: (0.04580558670435442, 0.5886703168399895),
            15: (0.4582523173083307, 0.1735506267461867),
            16: (0.12939557977525573, 0.690016328140396),
            17: (0.607698913404794, 0.362322730884702),
            18: (0.719569201584275, 0.13985272363426526),
            19: (0.8860336256842246, 0.891868301175821),
            20: (0.4238357358399233, 0.026771817842421997),
            21: (0.8252497121120052, 0.9532681441921305),
            22: (0.47415009287034726, 0.7353428557575755),
            23: (0.26253385360950576, 0.9768234503830608),
            24: (0.9363713903322148, 0.13022993020357043),
            25: (0.6243437191127235, 0.21665962402659544),
            26: (0.5572917679006295, 0.2083567880838434),
            27: (0.7482655725962591, 0.12631654071213483),
            28: (0.6435799740880603, 0.5488515965193208),
            29: (0.34509802713919313, 0.8800306496459869),
            30: (0.021423673670808885, 0.4666482714834408),
            31: (0.640952694324525, 0.3232711412508066),
            32: (0.17440205342790494, 0.9528527425842739),
            33: (0.1332965908314021, 0.3996510641743197),
            34: (0.583993110207876, 0.42704536740474663),
            35: (0.3073865727705063, 0.09186645974288632),
            36: (0.740625863119245, 0.68128520136847),
            37: (0.3345284735051981, 0.6569436279895382),
            38: (0.17972981733780147, 0.999395685828547),
            39: (0.6315322816286787, 0.7311657634689946)
        }
        roads = [
            [7, 6, 1],
            [4, 6, 7],
            [4, 3, 5],
            [5, 4, 1, 2],
            [1, 2, 3],
            [7, 0, 16, 37, 12],
            [0, 1, 7],
            [0, 1, 5, 6],
            [9, 10, 1, 2],
            [7, 8, 6],
            [9, 8, 1, 2, 4],
            [22, 28, 26, 13, 27, 7, 10, 31, 17],
            [8, 5, 37, 16, 0, 4, 9, 34],
            [27, 24, 18, 10],
            [24, 27, 13, 26, 25, 11],
            [35, 31, 26, 25, 1],
            [37, 30, 5, 0, 12, 14],
            [7, 1, 8, 18, 19, 28, 15],
            [24, 27, 26, 25, 24, 15, 2, 29, 12, 13],
            [21, 4, 3, 33, 9, 7, 28, 6, 27],
            [35, 26, 15, 6, 1],
            [2, 4, 10, 14, 22, 3, 33],
            [4, 21, 1, 11, 22, 3, 26, 5],
            [13, 19, 32, 22, 27, 21, 11],
            [10, 13, 27],
            [13, 18, 26, 17, 15, 14],
            [28, 11, 25, 22, 20, 15, 21, 14],
            [13, 14, 26, 24, 23, 19],
            [22, 17, 19, 31, 26, 11],
            [23, 22, 4, 18, 9, 37, 5, 14, 26, 16],
            [33, 14, 16],
            [25, 15, 17, 28, 11],
            [29, 23, 27],
            [30, 21, 19],
            [39, 36, 12, 5],
            [20, 15, 6, 3],
            [34, 29, 7, 2, 12, 28, 22, 4],
            [5, 32, 16, 12, 29, 36],
            [23, 32],
            [36, 34, 31, 28, 17]
        ]
        return Map(intersections, roads)

def show_map(map_obj, start=None, goal=None, path=None):
    """
    Função mock para visualização. Apenas imprime informações básicas.
    """
    print("Intersections:", map_obj.intersections)
    print("Roads:", map_obj.roads)
    if start is not None:
        print(f"Start: {start}")
    if goal is not None:
        print(f"Goal: {goal}")
    if path is not None:
        print(f"Path: {path}")
